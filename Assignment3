#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 3

int isInputValid(int, int, int);
int isBoardFull(char[N][N]);
void createInitialBoard(char[N][N]);
void readUserMove(int *, int *);
void printCurrentBoard(char[N][N]);
int getComputerMove(char[N][N], int *, int *, int, int);
int gameWon(char[N][N], char);
int computerPlaysToWin(char[N][N], int *, int *);
void computerPlaysRandom(int *, int *, int, int);
void sumAllDimensions(char[N][N], int[N], int[N], int *, int *);
int memberOf(int, int[N]);
int computerPlaysToBlock(char[N][N], int *, int *);

int main()
{

  int userRow, userCol, computerRow, computerCol;
  int taken;
  char board[N][N];
  char winner = 'N';

  srand(time(NULL));

  printf("This tic-tac-toe board is of size %d by %d\n", N, N);

  printf("Player symbol: X \nComputer symbol: O\n\n");

  printf("Here is the board - spaces are indicated by a ?\n");

  createInitialBoard(board); // create a 3 X 3 board with '?' in each cell

  while ((winner != 'Y') && !(isBoardFull(board))) // while there is no winner and the board is not full
  {
    taken = 0;

    while (!(taken)) // loop used to accept valid row and col values from the user
    {
      readUserMove(&userRow, &userCol); //get user's move
      printf("You chose row %d and column %d \n", userRow, userCol);

      while (!isInputValid(userRow, 1, N) || !isInputValid(userCol, 1, N)) // validate user's move
      {
        printf("That's is an invalid row or column number - try again\n");
        readUserMove(&userRow, &userCol);
        printf("You chose row %d and column %d \n", userRow, userCol);
      }

      if (board[userRow - 1][userCol - 1] == '?') // if cell is unoccupied
      {
        board[userRow - 1][userCol - 1] = 'X'; // store an X there
        taken = 1;
      }
      else
      {
        taken = 0; // otherwise inform the user to enter values again
        printf("That spot is taken - please try another one\n");
      }

    } //end of while (!taken)

    if (gameWon(board, 'X')) // check if the user wins - game will end if the user does win
    {
      printf("Congrats - you won against the computer :)\n");
      winner = 'Y';
    }

    else if (!(isBoardFull(board))) //check if the board is already full
    {
      taken = 0;

      while (!(taken))
      {
        getComputerMove(board, &computerRow, &computerCol, userRow - 1, userCol - 1); // get computer's row and col

        if (board[computerRow][computerCol] == '?') // check if the cell is unoccupied
        {
          board[computerRow][computerCol] = 'O';
          taken = 1;
        }
        else
        {
          taken = 0; //That spot is taken - computer - try another one
        }
      }

      printf("Computer chose row %d and column %d \n", computerRow + 1, computerCol + 1);

      if (gameWon(board, 'O')) // check if the computer wins - game must end if it does
      {
        printf("Oh the computer won this time :(( think hard next time\n");
        winner = 'Y';
      }
    }

    printCurrentBoard(board);

    printf("\nPress enter to continue \n");
    getchar();

  } //end of while

  if (winner != 'Y')
    printf("Game was a tie - no winner!\n\n");

  return 0;
}

int getComputerMove(char board[N][N], int *computerRow, int *computerCol, int userRow, int userCol)
{
  /* 
  This function determines computer's move in terms of row (computerRow) and column (computerCol)
  and outputs them to main. The computer first tries to find a winning spot for itself; if it doesn't
  find one, then it calls function computerPlaysRandom in its attempt to place its symbol in
  the same row or column as the user (userRow, userCol)
*/

  int winningSpot = 0;
  int blocked = 1; //this declaration is required if you attempt the bonus part

  winningSpot = computerPlaysToWin(board, computerRow, computerCol);

  if (!winningSpot) // if computer does find a winning spot, then it plays to block the user
  {
    computerPlaysRandom(computerRow, computerCol, userRow, userCol);

    /*
	   If you attempt the bonus part, then uncomment the code below and use it to first try and block user move
	   If unsuccessful, then it pick row and col (pseudo) randomly
	   */

    blocked = computerPlaysToBlock(board, computerRow, computerCol);
    if (blocked == 0)
      computerPlaysRandom(computerRow, computerCol, userRow, userCol);
  }

  return winningSpot;
}

/******
 Valid Input: checks to see if user entered number between min and max 
 In: int, int, int 
 Out: int 
 Post: returns true or false
*******/
int isInputValid(int entered, int minimum, int maximum)
{
  if (entered >= minimum && entered <= maximum)
  {
    return 1;
  }
  return 0;
}

/******
 Full Board: checks to see if board is full 
 In: char 
 Out: int 
 Post: returns true or false
*******/
int isBoardFull(char board[N][N])
{
  for (int i = 0; i < N; ++i)
  {
    for (int j = 0; j < N; ++j)
    {
      if (board[i][j] == '?')
      {
        return 0;
      }
    }
  }
  return 1;
}

/******
 Initial Board: creates empty board, each cell assigned "?" 
 In: char 
 Out: void 
 Post: assigns char to each cell in board
*******/
void createInitialBoard(char board[N][N])
{
  for (int i = 0; i < N; ++i)
  {
    for (int j = 0; j < N; ++j)
    {
      board[i][j] = '?';
      printf(" %c ", board[i][j]);

      if (j != 2)
      {
        printf("|");
      }
      else if (i != 2)
      {
        printf("\n");
        printf("------------\n");
      }
    }
  }
  printf("\n");
}

/******
 User Move: user enters column and row value 
 In: int *, int * 
 Out: void 
 Post: Places X on board
*******/
void readUserMove(int *userRow, int *userCol)
{
  printf("\nYour move - enter numbers between 1 and 3\n\n");
  printf("Enter row number: ");
  scanf("%d", userRow);
  printf("Enter column number: ");
  scanf("%d", userCol);
  printf("\n");
}

/******
 Print Current Board: prints updated board during game 
 In: char 
 Out: void 
 Post: Updates board during game
*******/
void printCurrentBoard(char board[N][N])
{
  printf("\nCurrent board now is: \n\n");
  for (int i = 0; i < N; ++i)
  {
    for (int j = 0; j < N; ++j)
    {
      printf(" %c ", board[i][j]);

      if (j != 2)
      {
        printf("|");
      }
      else if (i != 2)
      {
        printf("\n");
        printf("------------\n");
      }
    }
  }
}

/******
 Game Won: checks to see if there's a winner 
 In: char, char 
 Out: int 
 Post: Returns true or false
*******/
int gameWon(char board[N][N], char symbol)
{
  int sumR[N] = {0, 0, 0};
  int sumC[N] = {0, 0, 0};
  int sumLD = 0;
  int sumRD = 0;

  sumAllDimensions(board, sumR, sumC, &sumLD, &sumRD);

  for (int i = 0; i < N; ++i)
  {
    for (int j = 0; j < N; ++j)
    {
      if (symbol == 'O' && (sumR[i] == 12 || sumC[j] == 12 || sumLD == 12 || sumRD == 12))
      {
        return 1;
      }
      else if (symbol == 'X' && (sumR[i] == 3 || sumC[j] == 3 || sumLD == 3 || sumRD == 3))
      {
        return 1;
      }
    }
  }
  return 0;
}

/******
 Computer Plays: checks to see if computer won game on row, column or diagonal
 In: char, int *, int *
 Out: int 
 Post: Returns true or false
*******/
int computerPlaysToWin(char board[N][N], int *cRow, int *cCol)
{
  int sumR[N] = {0, 0, 0};
  int sumC[N] = {0, 0, 0};
  int sumLD = 0;
  int sumRD = 0;

  sumAllDimensions(board, sumR, sumC, &sumLD, &sumRD);

  for (int i = 0; i < N; ++i)
  {
    for (int j = 0; j < N; ++j)
    {
      if (sumR[i] == 8 && board[i][j] == '?')
      {
        *cRow = i;
        *cCol = j;
        return 1;
      }
      else if (sumC[j] == 8 && board[i][j] == '?')
      {
        *cRow = i;
        *cCol = j;
        return 1;
      }
    }
  }

  if (sumLD == 8 && board[0][0] == '?')
  {
    *cRow = 0;
    *cCol = 0;
  }
  else if (sumRD == 8 && board[0][2] == '?')
  {
    *cRow = 0;
    *cCol = 2;
  }
  else if (sumLD == 8 && board[1][1] == '?')
  {
    *cRow = 1;
    *cCol = 1;
  }
  else if (sumRD == 8 && board[2][0] == '?')
  {
    *cRow = 2;
    *cCol = 0;
  }
  else if (sumLD == 8 && board[2][2] == '?')
  {
    *cRow = 2;
    *cCol = 2;
  }
  return 0;
}

/******
 Computer Plays Random: rand function to set computer move 
 In: int *, int *, int, int  
 Out: void 
 Post: sets computer move
*******/
void computerPlaysRandom(int *cRow, int *cCol, int uRow, int uCol)
{
  int choice = rand() % N;
  srand(time(0));

  switch (choice)
  {
  case 0:
    *cRow = uRow;
    *cCol = rand() % N;
    break;
  case 1:
    *cRow = rand() % N;
    *cCol = uCol;
    break;
  case 2:
    *cRow = uCol;
    *cCol = uRow;
    break;
  }
}

/******
 Sum: computes winning sum of scored
 In: char, int, int, int *, int * 
 Out: void 
 Post: calculates total sum 
*******/
void sumAllDimensions(char board[N][N], int sumR[N], int sumC[N], int *sumLD, int *sumRD)
{
  for (int i = 0; i < N; ++i)
  {
    for (int j = 0; j < N; ++j)
    {
      if (board[i][j] == 'O') // sum of rows computer
      {
        sumR[i] += 4;
        sumC[j] += 4;
      }
      else if (board[i][j] == 'X') // sum of rows of user
      {
        sumR[i] += 1;
        sumC[j] += 1;
      }
    }
  }

  if (board[1][1] == 'O') //sum of diagonals
  {
    *sumLD += 4;
    *sumRD += 4;
  }
  else if (board[1][1] == 'X')
  {
    *sumLD += 1;
    *sumRD += 1;
  }

  if (board[0][0] == 'O')
  {
    *sumLD += 4;
  }
  else if (board[0][0] == 'X')
  {
    *sumLD += 1;
  }

  if (board[0][2] == 'O')
  {
    *sumRD += 4;
  }
  else if (board[0][2] == 'X')
  {
    *sumRD += 1;
  }

  if (board[2][0] == 'O')
  {
    *sumRD += 4;
  }
  else if (board[2][0] == 'X')
  {
    *sumRD += 1;
  }

  if (board[2][2] == 'O')
  {
    *sumLD += 4;
  }
  else if (board[2][2] == 'X')
  {
    *sumLD += 1;
  }
}

/******
 Member: checks to see if value exists in array 
 In: int, int  
 Out: int  
 Post: returns true or false
*******/
int memberOf(int aNum, int someArray[N])
{
  for (int i = 0; i < N; ++i)
  {
    if (someArray[i] == aNum)
    {
      return 1;
    }
  }
  return 0;
}

/******
 Computer Plays To Block: computer blocks user move 
 In: char, int *, int *  
 Out: int  
 Post: returns true or false
*******/
int computerPlaysToBlock(char board[N][N], int *cRow, int *cCol)
{
  int sumR[N] = {0, 0, 0};
  int sumC[N] = {0, 0, 0};
  int sumLD = 0;
  int sumRD = 0;

  sumAllDimensions(board, sumR, sumC, &sumLD, &sumRD);

  for (int i = 0; i < N; ++i)
  {
    for (int j = 0; j < N; ++j)
    {
      if (sumR[i] == 2 && board[i][j] == '?')
      {
        *cRow = i;
        *cCol = j;
        return 1;
      }
      else if (sumC[j] == 2 && board[i][j] == '?')
      {
        *cRow = i;
        *cCol = j;
        return 1;
      }
    }
  }

  if (sumLD == 2 && board[0][0] == '?')
  {
    *cRow = 0;
    *cCol = 0;
  }
  else if (sumLD == 2 && board[1][1] == '?')
  {
    *cRow = 1;
    *cCol = 1;
  }
  else if (sumLD == 2 && board[2][2] == '?')
  {
    *cRow = 2;
    *cCol = 2;
  }
  else if (sumRD == 2 && board[0][2] == '?')
  {
    *cRow = 0;
    *cCol = 2;
  }
  else if (sumRD == 2 && board[2][0] == '?')
  {
    *cRow = 2;
    *cCol = 0;
  }
  return 0;
}
